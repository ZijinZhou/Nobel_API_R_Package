library(httr)
library(dplyr)
library(tidyr)
library(jsonlite)
library(stringr)
library(xml2)
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
nobel_prize <- "http://api.nobelprize.org/v1/prize.json"
prize_info <- nobel_prize %>%
GET()%>%
content(as = "text")%>%
fromJSON(simplifyDataFrame = TRUE) %>%
.[["prizes"]]
prize_info
share <- vector()
for(i in 1:nrow(prize_info)){
if(is.null(prize_info$laureates[i][[1]])==TRUE){
share[i] <- 1
}else{
share[i] <- nrow(as.data.frame(prize_info$laureates[i]))
}
}
cbind(prize_info,share)%>%
select(year,category,share)#%>%
#group_by(category)%>%
#summarize(mean(share))
get_nobel_share <- function(y = NULL, c = NULL){
nobel_prize <- "http://api.nobelprize.org/v1/prize.json"
prize_info <- nobel_prize %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["prizes"]]
share <- vector()
for(i in 1:nrow(prize_info)){
if(is.null(prize_info$laureates[i][[1]])==TRUE){
share[i] <- 1
}else{
share[i] <- nrow(as.data.frame(prize_info$laureates[i]))
}
}
share_info <- cbind(prize_info,share)%>%
dplyr::select(year,category,share)
if(is.null(y)&is.null(c)){
share_info
}else if(is.null(y)&!(is.null(c))){
dplyr::filter(share_info, category == c)
}else if(is.null(c)&!(is.null(y))){
dplyr::filter(share_info, year == y)
}else if(!(is.null(c))&(!is.null(y))){
dplyr::filter(share_info, year == y, category == c)
}else{
return("error")
}
}
get_nobel_share(c = "physics")
get_nobel_share(c = "physics",y = "2000")
get_nobel_share(y = "2000")
library(nobel)
load_all()
library(devtools)
load_all
load_all()
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
usa <- map_dbl(country,"n")%>%
as.data.frame()%>%
rownames_to_column()
country <- list()
for(y in c(2000:2010)){
y <- as.character(y)
country[[y]] <- get_nobel_country(y=y)%>%
filter(born_country == "USA")
}
usa <- map_dbl(country,"n")%>%
as.data.frame()%>%
rownames_to_column()
colnames(usa) <- c("year","winner")
ggplot(usa, aes(x = year, y = winner, group = 1))+
geom_line()
get_nobel_share()
library(roxygen2)
document()
library(devtools)
check()
?get_nobel_info
?get_nobel_gender
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,10))+
geom_smooth()
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
get_nobel_age(y = "2000")
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,10))+
geom_smooth()
compare_age <- get_nobel_age(c = c("physics","chemistry"))%>%
select(category,year,age)
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,10))+
geom_smooth()
document()
document()
check()
get_laureate <- function(){
#get data from api
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
laureate_info <- nobel_laureate %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["laureates"]]
#check status
if(httr::http_status(get_nobel)$message != "Success: (200) OK"){
stop("errors")
laureate_info
}
}
get_laureate()
get_nobel_info <- function(y = NULL, c = NULL){
#get data from api
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
get_nobel <- httr::GET(nobel_laureate)
laureate_info <- nobel_laureate %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["laureates"]]
#check status
if(httr::http_status(get_nobel)$message != "Success: (200) OK"){
stop("errors")
}
#clean data
laureate <- laureate_info %>%
dplyr::as_tibble()%>%
tidyr::unnest(cols = c(prizes))%>%
dplyr::select(id,firstname,surname,born,bornCountry,gender,year,category,share,motivation)%>%
tidyr::unite(fullname, firstname,surname,sep = " ") %>%
dplyr::mutate(country = stringr::str_replace_all(bornCountry,"\\(|\\)",""))
#only use the country that exists now
laureate$born_country <- ifelse(stringr::str_detect(laureate$country,".*now.*")==TRUE,stringr::str_replace_all(laureate$country, ".*now",""), laureate$country)
laureate <- laureate %>%
dplyr::select(id,fullname,born,born_country,gender,year,category,share,motivation)
#get final info by year or category
if(is.null(y)&is.null(c)){
laureate
}else if(is.null(y)&!(is.null(c))){
if(class(c)!="character"){
return("Please put a character!")
}
dplyr::filter(laureate, category == c)
}else if(is.null(c)&!(is.null(y))){
dplyr::filter(laureate, year == y)
}else{
dplyr::filter(laureate, year == y, category == c)
}
}
get_laureate <- function(){
#get data from api
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
laureate_info <- nobel_laureate %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["laureates"]]
#check status
if(httr::http_status(get_nobel)$message != "Success: (200) OK"){
stop("errors")
laureate_info
}
}
get_laureate <- function(){
#get data from api
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
get_nobel <- httr::GET(nobel_laureate)
laureate_info <- nobel_laureate %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["laureates"]]
#check status
if(httr::http_status(get_nobel)$message != "Success: (200) OK"){
stop("errors")
laureate_info
}
}
get_laureate()
get_laureate <- function(){
#get data from api
nobel_laureate <- "http://api.nobelprize.org/v1/laureate.json"
get_nobel <- httr::GET(nobel_laureate)
laureate_info <- nobel_laureate %>%
httr::GET()%>%
httr::content(as = "text")%>%
jsonlite::fromJSON(simplifyDataFrame = TRUE) %>%
.[["laureates"]]
#check status
if(httr::http_status(get_nobel)$message != "Success: (200) OK"){
stop("errors")
}
laureate_info
}
get_laureate()
document()
document()
check()
load_all()
check()
get_nobel_info(c = "literature", y = "2012")
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
get_nobel_age(y = "2000")
get_nobel_age <- function(n = NULL, y = NULL, c = NULL){
laureate <- get_nobel_info()
if(is.null(n)){
basic_info <- get_nobel_info(y,c)
}else{
basic_info <- dplyr::filter(laureate, fullname == n)
}
age_info <- basic_info %>%
dplyr::mutate(bornyear = stringr::str_sub(as.matrix(.[,"born"]),1,4))%>%
dplyr::mutate(age = as.numeric(year)-as.numeric(bornyear))%>%
dplyr::select(fullname, year,category,age)
age_info
}
get_nobel_age(y = "2000")
get_nobel_age(y = "2000")
compare_age <- get_nobel_age(c = c("physics","chemistry"))%>%
select(category,year,age)
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,10))+
geom_smooth()
get_nobel_gender(y = "1997")
get_nobel_gender <- function(y = NULL, c = NULL){
gender_info <- get_nobel_info(y,c) %>%
.[,"gender"] %>%
table()%>%
as.data.frame()
gender_info[1,2]/gender_info[2,2]
}
get_nobel_gender <- function(y = NULL, c = NULL, org = TRUE){
gendertest <- get_nobel_info(y, c)%>%
dplyr::count(gender)%>%
na.omit()
female <- any(gendertest$gender=="female")!=TRUE
male <- any(gendertest$gender=="male")!=TRUE
orgnization <- any(gendertest$gender=="org")!=TRUE
f <- c("female",0)
m <- c("male",0)
o <- c("org",0)
if(female){
gendertest <- rbind(f,gendertest)
}
if(male){
gendertest <- rbind(gendertest,m)
}
if(org == FALSE){
gender <- dplyr::filter(gendertest,gender == "female"|gender == "male")
}else{
if(orgnization){
gender <- rbind(gendertest,o)
}else{
gender <- gendertest
}
gender <- gender
}
gender
}
get_nobel_gender(y = "1997")
gender <- list()
for(c in c("physics","peace","economics","medicine","chemistry","literature")){
gender[[c]] <- get_nobel_gender(c = c, org = FALSE)
}
female <- map(gender,"n")%>%
map(as.numeric)%>%
map_dbl(1)%>%
as.data.frame()
colnames(female)<-c("female")
male <- map(gender,"n")%>%
map(as.numeric)%>%
map_dbl(2)%>%
as.data.frame()
colnames(male)<-c("male")
ratio <- cbind(female,male)%>%
rownames_to_column(var = "category")%>%
mutate(ratio = round((female/male)*100,2))%>%
select(category,ratio)%>%
arrange(ratio)
ratio
get_nobel_country(y = "1997")
library(devtools)
load_all()
check()
?get_nobel
?get_nobel_info
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
get_nobel_info(c = "literature", y = "2012")
get_laureate()
document9
document()
get_laureate()
get_nobel_info(c = "literature", y = "2012")
get_nobel_age(y = "2000")
check()
get_nobel_gender(y = "1997")
gender <- list()
for(c in c("physics","peace","economics","medicine","chemistry","literature")){
gender[[c]] <- get_nobel_gender(c = c, org = FALSE)
}
compare_age <- get_nobel_age(c = "physics")%>%
select(category,year,age)
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,10))+
geom_smooth()
female <- map(gender,"n")%>%
map(as.numeric)%>%
map_dbl(1)%>%
as.data.frame()
colnames(female)<-c("female")
male <- map(gender,"n")%>%
map(as.numeric)%>%
map_dbl(2)%>%
as.data.frame()
colnames(male)<-c("male")
ratio <- cbind(female,male)%>%
rownames_to_column(var = "category")%>%
mutate(ratio = round((female/male)*100,2))%>%
select(category,ratio)%>%
arrange(ratio)
ratio
ggplot(data = ratio, aes(x=category,y=ratio))+
geom_bar(stat="identity",fill="steelblue",width=0.5)
get_nobel_country(y = "1997", c = "physics")
get_nobel_country(y = "1997")
get_nobel_share(y = "2019")
get_nobel_share()%>%
group_by(category)%>%
summarize(share = round(mean(share),2))%>%
arrange(desc(share))
devtools::build_vignettes()
load_all()
test_that("prize",{
expect_is(get_prize(),"data.frame")
})
browseVignettes("nobel")
browseVignettes("nobel")
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
head(get_laureate(),5)
head(get_prize(),5)
ggplot(data = compare_age, aes(x = year, y = age, group = category,color = category))+
scale_x_discrete(breaks=seq(1901,2020,20))+
geom_smooth()
usa <- map_dbl(country,"n")%>%
as.data.frame()%>%
rownames_to_column()
country <- list()
for(y in c(2000:2010)){
y <- as.character(y)
country[[y]] <- get_nobel_country(y=y)%>%
filter(born_country == "USA")
}
usa <- map_dbl(country,"n")%>%
as.data.frame()%>%
rownames_to_column()
colnames(usa) <- c("year","winner")
ggplot(usa, aes(x = year, y = winner, group = 1))+
geom_line()
devtools::build_vignettes()
library(nobel)
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
build_vignettes()
build_vignettes()
